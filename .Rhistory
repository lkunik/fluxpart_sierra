sink(NULL, type = "message")
rm(list=ls())
###########################################
## Added by Lewis
###########################################
# List the packages you'll need for this analysis
ListOfPackages <- c("devtools", "tidyverse", "lubridate", "patchwork", "lutz", "svDialogs", "shiny",
"shinyTree", "ggforce", "gridExtra", "pracma", "minpack.lm", "RColorBrewer", "car", "mgcv", "nlstools",
"multcomp", "broomExtra", "MuMIn", "glmulti", "metafor")
# From this list, check any that aren't currently installed
newPackages <- ListOfPackages[!(ListOfPackages %in% installed.packages()[,"Package"])]
# If any new packages are not currently loaded, load them now
if(length(newPackages)) install.packages(newPackages)
lapply(ListOfPackages, library, character.only=TRUE)
# edit_r_environ()
# GITHUB_PAT = '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'
#if (!("FluxSynthU" %in% rownames(installed.packages()))) {
#  install_github('ksmiff33/FluxSynthU', force=TRUE)
#}
library(FluxSynthU)
site.meta <- FluxSynthU::site.meta
lookup.critdates <- FluxSynthU::lookup.critdates
install.packages("REddyProc")
install.packages("REddyProc")
library(REddyProc)
rm(list=ls())
###########################################
## Added by Lewis
###########################################
# List the packages you'll need for this analysis
ListOfPackages <- c("devtools", "tidyverse", "lubridate", "patchwork", "lutz", "svDialogs", "shiny",
"shinyTree", "ggforce", "gridExtra", "pracma", "minpack.lm", "RColorBrewer", "car", "mgcv", "nlstools",
"multcomp", "broomExtra", "MuMIn", "glmulti", "metafor")
# From this list, check any that aren't currently installed
newPackages <- ListOfPackages[!(ListOfPackages %in% installed.packages()[,"Package"])]
# If any new packages are not currently loaded, load them now
if(length(newPackages)) install.packages(newPackages)
lapply(ListOfPackages, library, character.only=TRUE)
# edit_r_environ()
# GITHUB_PAT = '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'
#if (!("FluxSynthU" %in% rownames(installed.packages()))) {
#  install_github('ksmiff33/FluxSynthU', force=TRUE)
#}
library(FluxSynthU)
site.meta <- FluxSynthU::site.meta
lookup.critdates <- FluxSynthU::lookup.critdates
View(FS_fProcessingThruREddyProc)
View(FS_fProcessingThruREddyProc)
force(sEddyProc)
force(sEddyProc_initialize)
force(sEddyProc_sMRFluxPartition)
View(sEddyProc_sMRFluxPartition)
force(fLloydTaylor)
View(fLloydTaylor)
dat_dir <- "/Users/lkunik/Documents/Eddy_Covariance/Kenny_code/1_Processed data/2_Output_from_ProcessingThruREddyProc/1_REddyProc outputs/1_after-night-part/"
flux_dat <- read.table(paste0(dat.dir, "AMF_US-CZ2-2011-after-night-part.txt"), header = T)
flux_dat <- read.table(paste0(dat_dir, "AMF_US-CZ2-2011-after-night-part.txt"), header = T)
View(flux_dat)
flux_dat <- read.table(paste0(dat_dir, "AMF_US-CZ2-2011-after-night-part.txt"), header = T, skip = 1)
?read.table
flux_dat <- read.table(paste0(dat_dir, "AMF_US-CZ2-2011-after-night-part.txt"), header = T, stringsAsFactors = T)
flux_dat <- read.table(paste0(dat_dir, "AMF_US-CZ2-2011-after-night-part.txt"), header = T, skip = 1, stringsAsFactors = T)
flux_dat <- read.table(paste0(dat_dir, "AMF_US-CZ2-2011-after-night-part.txt"), header = T, stringsAsFactors = T)
flux_dat <- flux_dat[2:nrow(flux_dat),]
flux_year <- unique(flux_dat[,1])
year_POSIX <- ISOdatetime(flux_year, 1, 1, 0, 0, 0, tz = "UTC")
posix_1970 <- ISOdatetime(1970, 1, 1, 0, 0, 0, tz = "UTC")
year_days_since_epoch <- as.numeric(difftime(year_POSIX,posix_1970,units="days")+1.0)
julian_days <- year_days_since_epoch + flux_dat[,2]*24 + flux_dat[,3]
flux_dat[,3]
flux_dat[,2] + flux_dat[,3]/24
dat_dir <- "/Users/lkunik/Documents/Eddy_Covariance/Kenny_code/1_Processed data/2_Output_from_ProcessingThruREddyProc/1_REddyProc outputs/1_after-night-part/"
flux_dat <- read.table(paste0(dat_dir, "AMF_US-CZ2-2011-after-night-part.txt"), header = T, stringsAsFactors = T)
flux_dat <- flux_dat[2:nrow(flux_dat),]
colnames(flux_dat)
install.packages("patc")
source("~/Documents/Bowling Group/dplyr/dplyr_intro.r")
# Climate Dynamics Assignment 1
library(ggplot2)
library(FluxSynthU)
library(scales)
message("1a.")
# Known constants:
Ein_Eout <- 4 #W/m2
s_per_yr <- 60*60*24*365
# atmospheric vars
Cp_air <- 1004 # [J K-1 kg-1] specific heat of air at constant pres
P0 <- 101.3e3 # [Pa or N m-2]
g <- 9.8 # [m s-2]
m_atm <- P0 / g # [kg m-2] mass per unit area
m_atm
# ocean vars
C_water <- 4218 # [J K-1 kg -1]
h_ocn <- 70 # [m]
rho_water <- 1000 # [kg m-3]
m_ocn <- 7e4 # [kg m-2] mass per unit area
# calculate combined specific heat
C_atm <- Cp_air * m_atm # [J K-1 m-2] units of C in Equation
C_ocn <- C_water * m_ocn # [J K-1 m-2] units of C in Equation
#C_sys <- C_atm * (m_atm/(m_atm + m_ocn)) + C_ocn * (m_ocn/(m_atm + m_ocn))
C_sys <- C_atm + C_ocn # heat capacities are additive
C_atm
format(C_atm, scientific = T)
format(C_ocn, scientific = T)
format(C_sys, scientific = T)
dTdt_s <- Ein_Eout / C_sys # K per s
dTdt_yr <- dTdt_s * s_per_yr # K per yr
dTdt_yr
sig <- 5.67e-8 # [W m-2 K-4] Stefan Boltzmann Constant
dT <- (Ein_Eout/sig/C_sys)^(1/4) # use blackbody radiation/S-B equation
dT
last_dTdt <- dTdt_yr
starting_Ein <- 342
starting_Eout <- starting_Ein - 4
starting_T <- (starting_Eout/sig)^(1/4)
last_T <- starting_T
T_vec <- rep(NA, length(years))
years <- seq(0.1, 25, by = 0.1)
T_vec <- rep(NA, length(years))
for(year in years){
new_Ein_Eout <- 342 - sig*(last_T + last_dTdt)^4
new_dTdt_s <- new_Ein_Eout / C_sys # K per s
new_dTdt_yr <- new_dTdt_s * s_per_yr/10 # K per yr
last_dTdt <- new_dTdt_yr
last_T <- last_T + last_dTdt
T_vec[which(years %in% year)] <- last_T
#message(paste0("year ", year, ": dT/dt = ", round(new_dTdt_yr, 2)))
#message(paste0("year ", year, ": new Ein - Eout = ", round(new_Ein_Eout, 2)))
}
T_vec <- c(starting_T, T_vec)
years <- c(0, years)
plot(x = years, y = T_vec, type = 'l', lwd = 2, col = "red")
years <- seq(0.1, 15, by = 0.1)
T_vec <- rep(NA, length(years))
for(year in years){
new_Ein_Eout <- 342 - sig*(last_T + last_dTdt)^4
new_dTdt_s <- new_Ein_Eout / C_sys # K per s
new_dTdt_yr <- new_dTdt_s * s_per_yr/10 # K per yr
last_dTdt <- new_dTdt_yr
last_T <- last_T + last_dTdt
T_vec[which(years %in% year)] <- last_T
#message(paste0("year ", year, ": dT/dt = ", round(new_dTdt_yr, 2)))
#message(paste0("year ", year, ": new Ein - Eout = ", round(new_Ein_Eout, 2)))
}
T_vec <- c(starting_T, T_vec)
years <- c(0, years)
dat <- data.frame(years, T_vec)
ggplot(dat) +
geom_line(aes(x = years, y = T_vec), color = "red", size = 1.5) +
scale_y_continuous(breaks = seq(T_min, T_max, by = 6)) +
theme_FS()
T_vec <- c(starting_T, T_vec)
T_min <- starting_T
T_max <- max(T_vec)
years <- c(0, years)
dat <- data.frame(years, T_vec)
ggplot(dat) +
geom_line(aes(x = years, y = T_vec), color = "red", size = 1.5) +
scale_y_continuous(breaks = seq(T_min, T_max, by = 6)) +
theme_FS()
T_min
T_max
dat <- data.frame(years, T_vec)
ggplot(dat) +
geom_line(aes(x = years, y = T_vec), color = "red", size = 1.5) +
scale_y_continuous(breaks = seq(T_min, T_max, by = diff(T_min, T_max)/6)) +
theme_FS()
seq(T_min, T_max, by = diff(T_min, T_max)/6)
diff(T_min, T_max)
T_min, T_max
m
T_min <- starting_T
T_max <- max(T_vec)
seq(T_min, T_max, by = (T_max-T_min)/6)
dat <- data.frame(years, T_vec)
ggplot(dat) +
geom_line(aes(x = years, y = T_vec), color = "red", size = 1.5) +
scale_y_continuous(breaks = seq(T_min, T_max, by = (T_max-T_min)/6)) +
theme_FS()
## 1b.
message("1b.")
sig <- 5.67e-8 # [W m-2 K-4] Stefan Boltzmann Constant
dT <- (Ein_Eout/sig/C_sys)^(1/4) # use blackbody radiation/S-B equation
dT
last_dTdt <- dTdt_yr
starting_Ein <- 342
starting_Eout <- starting_Ein - 4
starting_T <- (starting_Eout/sig)^(1/4)
last_T <- starting_T
T_vec <- rep(NA, length(years))
years <- seq(0.1, 15, by = 0.1)
T_vec <- rep(NA, length(years))
for(year in years){
new_Ein_Eout <- 342 - sig*(last_T + last_dTdt)^4
new_dTdt_s <- new_Ein_Eout / C_sys # K per s
new_dTdt_yr <- new_dTdt_s * s_per_yr/10 # K per yr
last_dTdt <- new_dTdt_yr
last_T <- last_T + last_dTdt
T_vec[which(years %in% year)] <- last_T
#message(paste0("year ", year, ": dT/dt = ", round(new_dTdt_yr, 2)))
#message(paste0("year ", year, ": new Ein - Eout = ", round(new_Ein_Eout, 2)))
}
T_vec <- c(starting_T, T_vec)
T_min <- starting_T
T_max <- max(T_vec)
years <- c(0, years)
dat <- data.frame(years, T_vec)
ggplot(dat) +
geom_line(aes(x = years, y = T_vec), color = "red", size = 1.5) +
scale_y_continuous(breaks = seq(T_min, T_max, by = (T_max-T_min)/6)) +
theme_FS()
dat <- data.frame(years, T_vec)
ggplot(dat) +
geom_line(aes(x = years, y = T_vec), color = "red", size = 1.5) +
scale_y_continuous(breaks = round(seq(T_min, T_max, by = (T_max-T_min)/6), 1)) +
theme_FS()
# @ year 10, temperature is starting to level off, so T is increasing at a
# decreasing rate, therefore d2T/dt2 is negative
message("\n\n")
dat <- data.frame(years, T_vec)
ggplot(dat) +
geom_line(aes(x = years, y = T_vec), color = "red", size = 1.5) +
scale_y_continuous(breaks = round(seq(T_min, T_max, by = (T_max-T_min)/6), 2)) +
theme_FS()
dat <- data.frame(years, T_vec)
ggplot(dat) +
geom_line(aes(x = years, y = T_vec), color = "red", size = 1.5) +
scale_y_continuous(breaks = round(seq(T_min, T_max, by = (T_max-T_min)/6), 2)) +
ylab("Temperature [K]")
theme_FS()
dat <- data.frame(years, T_vec)
ggplot(dat) +
geom_line(aes(x = years, y = T_vec), color = "red", size = 1.5) +
scale_y_continuous(breaks = round(seq(T_min, T_max, by = (T_max-T_min)/6), 2)) +
ylab("Temperature [K]") +
theme_FS()
starting_T
#4.
dn <- 5#172 #June 1 day number
p_dist <- 147.5e9 #[m] perihelion dist to sun (147.5 million km)
a_dist <- 152.6e9 #[m] aphelion dist to sun (152.6 million km)
a_day <- 186 #July 5 is aphelion day
dbar <- mean(c(p_dist, a_dist))
theta_d <- 2* pi * dn/365 # dn = day number
d <- p_dist + (a_dist - p_dist)*cos(2*pi*(dn-186)/365) #approximate dist to sun, does not take into account eccentricity
delta <- -23.5*cos(theta_d) * pi/180 # [radians] solar declination angle
lat <- -90:90
phi <- (lat) * pi/180 #latitude
h0 <- acos(-tan(phi)*tan(delta))
h0_hi <- which(h0 == max(h0, na.rm = T))
h0_lo <- which(h0 == min(h0, na.rm = T))
if(length(is.nan(h0)) > 0){
if(h0_hi < 90){
h0[1:(h0_hi-1)] <- pi
h0[(h0_lo + 1):181] <- 0
} else {
h0[1:(h0_lo-1)] <- 0
h0[(h0_hi + 1):181] <- pi
}
}
Qbar_day <- (S0/pi) * ((dbar / d)^2) * (h0 * sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0))
dat <- data.frame(lat, Qbar_day, h0)
ggplot(dat) +
geom_line(aes(x = lat, y = h0), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
ggplot(dat) +
geom_line(aes(x = lat, y = Qbar_day), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
Qbar_day_h0_fixed <- (S0/pi) * ((dbar / d)^2) * (pi/2) * (sin(phi)*sin(delta) + cos(phi)*cos(delta))
dat <- data.frame(lat, Qbar_day_h0_fixed)
ggplot(dat) +
geom_line(aes(x = lat, y = Qbar_day_h0_fixed), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
Qbar_day_phi_delta_fixed <- (S0/pi) * ((dbar / d)^2) * (pi/2) * h0 * mean(sin(phi)*sin(delta) + cos(phi)*cos(delta))
dat <- data.frame(lat, Qbar_day_phi_delta_fixed)
ggplot(dat) +
geom_line(aes(x = lat, y = Qbar_day_phi_delta_fixed), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
ggplot(dat) +
geom_line(aes(x = lat, y = Qbar_day_phi_delta_fixed), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
Qbar_day_phi_delta_fixed <- (S0/pi) * ((dbar / d)^2) * (pi/2) * h0 * mean(sin(phi)*sin(delta) + cos(phi)*cos(delta))
source("~/Documents/Climate Dynamics/HW1/HW1.r")
ggplot(dat) +
geom_line(aes(x = lat, y = Qbar_day_phi_delta_fixed), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
ggplot(dat) +
geom_line(aes(x = lat, y = Qbar_day_h0_fixed), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
ggplot(dat) +
geom_line(aes(x = lat, y = Qbar_day), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
Ein_cap
Eout_cap <- Ein_cap
Te_cap <- (Eout_cap/sig)^(1/4)
message(paste0("Earth equivalent temp as a small capsule would be ", round(Te_cap, 2), " K"))
Ein <- S0 * (1 - alpha_p) / 4
Eout <- Ein
Te <- (Eout/sig)^(1/4)
message(paste0("Normal spherical Earth equivalent temp is ", round(Te, 2), " K"))
Ein
Ein <- S0 * (1 - alpha_p) / 4
Ein
S0/4
message(paste("Equivalent temperature of atmosphere (T_A) =", round(TA, 2), "W m-2"))
Qbar_day_h0_fixed <- (S0/pi) * ((dbar / d)^2) * (pi/2) * (sin(phi)*sin(delta) + cos(phi)*cos(delta))
dat <- data.frame(lat, Qbar_day_h0_fixed)
ggplot(dat) +
geom_line(aes(x = lat, y = Qbar_day_h0_fixed), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
dn <- 172 #June 1 day number
p_dist <- 147.5e9 #[m] perihelion dist to sun (147.5 million km)
a_dist <- 152.6e9 #[m] aphelion dist to sun (152.6 million km)
a_day <- 186 #July 5 is aphelion day
dbar <- mean(c(p_dist, a_dist))
theta_d <- 2* pi * dn/365 # dn = day number
d <- p_dist + (a_dist - p_dist)*cos(2*pi*(dn-186)/365) #approximate dist to sun, does not take into account eccentricity
delta <- -23.5*cos(theta_d) * pi/180 # [radians] solar declination angle
lat <- -90:90
phi <- (lat) * pi/180 #latitude
h0 <- acos(-tan(phi)*tan(delta))
h0_hi <- which(h0 == max(h0, na.rm = T))
h0_lo <- which(h0 == min(h0, na.rm = T))
if(length(is.nan(h0)) > 0){
if(h0_hi < 90){
h0[1:(h0_hi-1)] <- pi
h0[(h0_lo + 1):181] <- 0
} else {
h0[1:(h0_lo-1)] <- 0
h0[(h0_hi + 1):181] <- pi
}
}
Qbar_day <- (S0/pi) * ((dbar / d)^2) * (h0 * sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0))
dat <- data.frame(lat, Qbar_day, h0)
ggplot(dat) +
geom_line(aes(x = lat, y = h0), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
ggplot(dat) +
geom_line(aes(x = lat, y = Qbar_day), color = "blue", size = 2) +
scale_x_continuous(breaks = seq(-90, 90, by = 20)) +
theme_FS()
h0_alt <- seq(h0[1], tail(h0, 1), by = (tail(h0, 1) - h0[1])/180)
length(h0_alt)
h0_alt
rm(list=ls())
library(tidyverse)
library(patchwork)
theme_KS <- function() {
theme(
plot.title = element_text(color="black", hjust = 0.5, size=14, face="bold"),
plot.subtitle = element_text(color="black", hjust = 0.5, size=12),
axis.line=element_line(size=0.75),
axis.title.x=element_text(size=14,color="black"),
axis.text.x=element_text(size=12,color="black"),
axis.title.y=element_text(size=14,color="black"),
axis.text.y=element_text(size=12,color="black"),
legend.title=element_text(size=11,color="black"),
legend.title.align = 0.5,
legend.text=element_text(size=10,color="black"),
legend.background=element_blank(),
legend.key=element_blank(),
legend.key.size=unit(1,"lines"),
panel.grid.major = element_line(linetype = "dotted", color = "gray"),
panel.grid.minor=element_blank(),
panel.background=element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
strip.placement = "outside"
)
}
# Set directory
data_directory <- "/Users/peekaboo/Desktop/tidyverse tutorial/"
# Load data in directory
fluxdat <- read.table(paste0(data_directory, "fluxdat_2.txt"), header = T, stringsAsFactors = F)
site.meta <- read.table(paste0(data_directory, "site_meta.txt"), header = T, stringsAsFactors = F)
plot(x = lat, y = LOD, type = 'l', col = "blue", lwd = 2)
source("~/Documents/Climate Dynamics/HW1/HW1.r")
source("~/Documents/Climate Dynamics/HW1/HW1.r")
LOD <- h0 * 24/pi
LOD_alt <- h0_alt * 12/pi
dat <- data.frame(lat, Qbar_day, LOD, Qbar_day_alt, LOD_alt)
plot(x = lat, y = LOD, type = 'l', col = "blue", lwd = 2)
lines(x = lat, y = LOD_alt, col = "red")
plot(x = lat, y = LOD, type = 'l', col = "blue", lwd = 2)
lines(x = lat, y = LOD_alt, col = "red", lwd = 2)
legend("topleft", legend = c("h0", "alt h0"), col = c("red3", "navyblue"))
legend("topleft", legend = c("h0", "alt h0"), col = c("red3", "navyblue"),
lty = 1)
legend("topleft", legend = c("h0", "alt h0"), col = c("red3", "navyblue"),
lty = 1, lwd = 2)
plot(x = lat, y = LOD, type = 'l', col = "blue", lwd = 2, ylab = "Length of Day [hours]",
xlab = "Latitude (degrees)")
lines(x = lat, y = LOD_alt, col = "red", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=2)
legend("topleft", legend = c("h0", "alt h0"), col = c("red3", "navyblue"),
lty = 1, lwd = 2)
plot(x = lat, y = LOD, type = 'l', col = "blue", lwd = 2, ylab = "Length of Day [hours]",
xlab = "Latitude (degrees)", xaxt="n")
lines(x = lat, y = LOD_alt, col = "red", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=2)
?axis
plot(x = lat, y = LOD, type = 'l', col = "blue", lwd = 2, ylab = "Length of Day [hours]",
xlab = "Latitude (degrees)", xaxt="n")
lines(x = lat, y = LOD_alt, col = "red", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=1)
legend("topleft", legend = c("h0", "alt h0"), col = c("red3", "navyblue"),
lty = 1, lwd = 2)
h0_alt <- seq(4, 20 * pi/12, by = (16 * pi/12)/180)
Qbar_day <- (S0/pi) * ((dbar / d)^2) * (h0 * sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0))
Qbar_day_alt <- (S0/pi) * ((dbar / d)^2) * (h0_alt * sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0_alt))
LOD <- h0 * 24/pi
LOD_alt <- h0_alt * 12/pi
h0_alt <- seq(4, 20 * pi/12, by = (16 * pi/12)/180)
h0_alt
h0_alt <- seq(4 * pi/12, 20 * pi/12, by = (16 * pi/12)/180)
Qbar_day <- (S0/pi) * ((dbar / d)^2) * (h0 * sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0))
Qbar_day_alt <- (S0/pi) * ((dbar / d)^2) * (h0_alt * sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0_alt))
LOD <- h0 * 24/pi
LOD_alt <- h0_alt * 12/pi
#Make h0 plot:
dat <- data.frame(lat, Qbar_day, LOD, Qbar_day_alt, LOD_alt)
plot(x = lat, y = LOD, type = 'l', col = "blue", lwd = 2, ylab = "Length of Day [hours]",
xlab = "Latitude (degrees)", xaxt="n")
lines(x = lat, y = LOD_alt, col = "red", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=1)
legend("topleft", legend = c("h0", "alt h0"), col = c("red3", "navyblue"),
lty = 1, lwd = 2)
#Make Qbar_day plot:
dat <- data.frame(lat, Qbar_day, LOD, Qbar_day_alt, LOD_alt)
plot(x = lat, y = LOD, type = 'l', col = "blue", lwd = 2, ylab = "Length of Day [hours]",
xlab = "Latitude (degrees)", xaxt="n")
lines(x = lat, y = LOD_alt, col = "red", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=1)
legend("topleft", legend = c("h0", "alt h0"), col = c("navyblue", "red3"),
lty = 1, lwd = 2)
plot(x = lat, y = LOD, type = 'l', col = "navyblue", lwd = 2, ylab = "Length of Day [hours]",
xlab = "Latitude (degrees)", xaxt="n")
lines(x = lat, y = LOD_alt, col = "red3", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=1)
legend("topleft", legend = c("h0", "alt h0"), col = c("navyblue", "red3"),
lty = 1, lwd = 2)
#Make Qbar_day plot:
plot(x = lat, y = Qbar_day, type = 'l', col = "navyblue", lwd = 2,
ylab = "Average Daily Insolation [W m-2]",
xlab = "Latitude (degrees)")
lines(x = lat, y = Qbar_day_alt, col = "red3", lwd = 2)
#Make Qbar_day plot:
plot(x = lat, y = Qbar_day_alt, type = 'l', col = "red3", lwd = 2,
ylab = "Average Daily Insolation [W m-2]",
xlab = "Latitude (degrees)", xaxt="n")
lines(x = lat, y = Qbar_day, col = "navyblue", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=1)
legend("topleft", legend = c("Qbar_day", "alt Qbar_day"), col = c("red3", "navyblue"),
lty = 1, lwd = 2)
h0
h0_alt <- seq(4 * pi/24, 20 * pi/24, by = (16 * pi/12)/180)
Qbar_day <- (S0/pi) * ((dbar / d)^2) * (h0 * sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0))
Qbar_day_alt <- (S0/pi) * ((dbar / d)^2) * (h0_alt * sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0_alt))
h0_alt <- seq(4 * pi/24, 20 * pi/24, by = (16 * pi/24)/180)
Qbar_day <- (S0/pi) * ((dbar / d)^2) * (h0 * sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0))
Qbar_day_alt <- (S0/pi) * ((dbar / d)^2) * (h0_alt * sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0_alt))
LOD <- h0 * 24/pi
LOD_alt <- h0_alt * 24/pi
#Make h0 plot:
plot(x = lat, y = LOD, type = 'l', col = "navyblue", lwd = 2, ylab = "Length of Day [hours]",
xlab = "Latitude (degrees)")
lines(x = lat, y = LOD_alt, col = "red3", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=1)
legend("topleft", legend = c("h0", "alt h0"), col = c("navyblue", "red3"),
lty = 1, lwd = 2)
#Make Qbar_day plot:
plot(x = lat, y = Qbar_day_alt, type = 'l', col = "red3", lwd = 2,
ylab = "Average Daily Insolation [W m-2]",
xlab = "Latitude (degrees)", xaxt="n")
lines(x = lat, y = Qbar_day, col = "navyblue", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=1)
legend("topleft", legend = c("Qbar_day", "alt Qbar_day"), col = c("red3", "navyblue"),
lty = 1, lwd = 2)
l
l
l
#Make Qbar_day plot:
plot(x = lat, y = Qbar_day, type = 'l', col = "navyblue", lwd = 2,
ylab = "Average Daily Insolation [W m-2]",
xlab = "Latitude (degrees)", xaxt="n")
lines(x = lat, y = Qbar_day_alt, col = "red3", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=1)
legend("topleft", legend = c("Qbar_day", "alt Qbar_day"), col = c("red3", "navyblue"),
lty = 1, lwd = 2)
h0
h0_alt
Qbar_day_alt[Qbar_day_alt < 0] <- 0
#Make Qbar_day plot:
plot(x = lat, y = Qbar_day, type = 'l', col = "navyblue", lwd = 2,
ylab = "Average Daily Insolation [W m-2]",
xlab = "Latitude (degrees)", xaxt="n")
lines(x = lat, y = Qbar_day_alt, col = "red3", lwd = 2)
axis(1, at = seq(-90, 90, by = 20), las=1)
legend("topleft", legend = c("Qbar_day", "alt Qbar_day"), col = c("red3", "navyblue"),
lty = 1, lwd = 2)
source("~/Documents/Eddy_Covariance/Flux_part/sierra/baseline/4_combine_years.r")
?list.files
